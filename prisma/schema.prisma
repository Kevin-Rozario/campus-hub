generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Student
  Faculty
  Admin
}

enum AttendanceStatus {
  Present
  Absent
  Late
  Excused
}

enum GradeType {
  A_PLUS
  A
  A_MINUS
  B_PLUS
  B
  B_MINUS
  C_PLUS
  C
  C_MINUS
  D_PLUS
  D
  D_MINUS
  F
  INCOMPLETE
  PASS
  FAIL
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  fullName     String
  phoneNumber  String?
  role         Role     @default(Student)
  isActive     Boolean  @default(true)
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  apiKey          ApiKey?
  announcements   Announcement[] @relation("PostedBy")
  materials       Material[]     @relation("UploadedByFaculty")
  results         Result[]       @relation("StudentResults")
  declaredResults Result[]       @relation("DeclaredByAdmin")
  enrollments     Enrollment[]
  attendances     Attendance[]
  createdCourses  Course[]       @relation("CreatedCourses")
  events          Event[]        @relation("EventOrganizedBy")

  @@index([email])
  @@index([role])
  @@map("users")
}

model ApiKey {
  id        String    @id @default(uuid())
  key       String    @unique
  userId    String    @unique
  expiresAt DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([key])
  @@map("api_keys")
}

model Announcement {
  id          String   @id @default(uuid())
  title       String
  body        String
  postedById  String
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to User
  postedBy User @relation("PostedBy", fields: [postedById], references: [id], onDelete: Cascade)

  @@index([postedById])
  @@index([createdAt])
  @@map("announcements")
}

model Course {
  id          String   @id @default(uuid())
  name        String
  code        String   @unique
  description String?
  credits     Int      @default(3)
  isActive    Boolean  @default(true)
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdBy   User         @relation("CreatedCourses", fields: [createdById], references: [id], onDelete: Cascade)
  materials   Material[]
  results     Result[]
  enrollments Enrollment[]
  attendances Attendance[]

  @@index([code])
  @@index([isActive])
  @@map("courses")
}

model Material {
  id           String   @id @default(uuid())
  title        String
  url          String
  courseId     String
  uploadedById String
  fileSize     Int?
  mimeType     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  course     Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  uploadedBy User   @relation("UploadedByFaculty", fields: [uploadedById], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([uploadedById])
  @@map("materials")
}

model Result {
  id           String     @id @default(uuid())
  studentId    String
  courseId     String
  grade        GradeType?
  numericGrade Float?
  maxPoints    Float?
  examType     String?
  declaredById String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  student    User   @relation("StudentResults", fields: [studentId], references: [id], onDelete: Cascade)
  declaredBy User   @relation("DeclaredByAdmin", fields: [declaredById], references: [id], onDelete: Cascade)
  course     Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId, examType])
  @@index([studentId])
  @@index([courseId])
  @@map("results")
}

model Enrollment {
  id         String    @id @default(uuid())
  studentId  String
  courseId   String
  isActive   Boolean   @default(true)
  enrolledAt DateTime  @default(now())
  droppedAt  DateTime?

  student User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
  @@map("enrollments")
}

model Attendance {
  id        String           @id @default(uuid())
  studentId String
  courseId  String
  date      DateTime
  status    AttendanceStatus @default(Present)
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  student User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId, date])
  @@index([studentId])
  @@index([courseId])
  @@index([date])
  @@map("attendances")
}

model Event {
  id           String    @id @default(uuid())
  title        String
  description  String
  startDate    DateTime
  endDate      DateTime?
  location     String?
  organizerId  String
  eventForRole String[]
  isPublic     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  organizer User @relation("EventOrganizedBy", fields: [organizerId], references: [id], onDelete: Cascade)

  @@index([startDate])
  @@index([isPublic])
  @@map("events")
}
